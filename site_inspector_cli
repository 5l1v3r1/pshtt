#!/usr/bin/env python

"""Scan a domain. Example: dhs.gov

Usage:
  site_inspector_python.py (INPUT ...) [--output OUTFILE] [--sorted] [--json]
  site_inspector_python.py (-h | --help)

Options:
  -h --help             Show this message.
  -s --sorted           Sort output by domain, A-Z.
  -o --output=OUTFILE   Write to file. (Defaults to STDOUT.)
  -j --json             Get results in JSON. (Defaults to CSV.)

Notes:
  If the first INPUT ends with .csv, domains will be read from CSV.
  CSV output will always be written to disk, defaulting to results.csv.
"""

import docopt
import site_inspector
import utils

def main():
    args = docopt.docopt(__doc__, version='v0.0.1')

    # Read from a .csv, or allow domains on the command line.
    domains = []
    if args['INPUT'][0].endswith(".csv"):
      domains = utils.load_domains(args['INPUT'][0])
    else:
      domains = args['INPUT']

    # If the user wants to sort them, sort them in place.
    if args['--sorted']:
        domains.sort()

    results = site_inspector.inspect_domains(domains)

    # JSON can go to STDOUT, or to a file.
    if args['--json']:
      output = utils.json_for(results)
      if args['--output'] is None:
        print(output)
      else:
        utils.write(output, args['--output'])

    # CSV always goes to a file.
    else:
      if args['--output'] is None:
        out_file = 'results.csv'
      else:
        out_file = args['--output']

      site_inspector.csv_for(results, out_file)

if __name__=='__main__':
    main()
